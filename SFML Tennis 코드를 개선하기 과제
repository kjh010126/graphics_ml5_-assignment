#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <cmath>
#include <ctime>
#include <cstdlib>

#ifdef SFML_SYSTEM_IOS
#include <SFML/Main.hpp>
#endif

std::string resourcesDir()
{
#ifdef SFML_SYSTEM_IOS
    return "";
#else
    return "resources/";
#endif
}

int main()
{
    std::srand(static_cast<unsigned int>(std::time(NULL)));

    // Define some constants
    const float pi = 3.14159f;
    const float gameWidth = 800;
    const float gameHeight = 600;
    sf::Vector2f paddleSize(25, 100);
    sf::Vector2f obstacleSize(10, 100); // Size of the obstacle
    float ballRadius = 10.f;

    // Create the window of the application
    sf::RenderWindow window(sf::VideoMode(static_cast<unsigned int>(gameWidth), static_cast<unsigned int>(gameHeight), 32), "SFML Tennis",
                            sf::Style::Titlebar | sf::Style::Close);
    window.setVerticalSyncEnabled(true);

    // Load the sounds used in the game
    sf::SoundBuffer ballSoundBuffer;
    if (!ballSoundBuffer.loadFromFile(resourcesDir() + "ball.wav"))
        return EXIT_FAILURE;
    sf::Sound ballSound(ballSoundBuffer);

    // Create the SFML logo texture:
    sf::Texture sfmlLogoTexture;
    if(!sfmlLogoTexture.loadFromFile(resourcesDir() + "sfml_logo.png"))
        return EXIT_FAILURE;
    sf::Sprite sfmlLogo;
    sfmlLogo.setTexture(sfmlLogoTexture);
    sfmlLogo.setPosition(170, 50);

    // Create the left paddle
    sf::RectangleShape leftPaddle;
    leftPaddle.setSize(paddleSize - sf::Vector2f(3, 3));
    leftPaddle.setOutlineThickness(3);
    leftPaddle.setOutlineColor(sf::Color::Black);
    leftPaddle.setFillColor(sf::Color(100, 100, 200));
    leftPaddle.setOrigin(paddleSize / 2.f);

    // Create the right paddle
    sf::RectangleShape rightPaddle;
    rightPaddle.setSize(paddleSize - sf::Vector2f(3, 3));
    rightPaddle.setOutlineThickness(3);
    rightPaddle.setOutlineColor(sf::Color::Black);
    rightPaddle.setFillColor(sf::Color(200, 100, 100));
    rightPaddle.setOrigin(paddleSize / 2.f);

    // Create the ball
    sf::CircleShape ball;
    ball.setRadius(ballRadius - 3);
    ball.setOutlineThickness(2);
    ball.setOutlineColor(sf::Color::Black);
    ball.setFillColor(sf::Color::White);
    ball.setOrigin(ballRadius / 2, ballRadius / 2);

    // Create the obstacle
    sf::RectangleShape obstacle;
    obstacle.setSize(obstacleSize);
    obstacle.setOutlineThickness(3);
    obstacle.setOutlineColor(sf::Color::Black);
    obstacle.setFillColor(sf::Color::Green);
    obstacle.setOrigin(obstacleSize / 2.f);
    obstacle.setPosition(gameWidth / 2.f, gameHeight / 2.f);

    // Create the triangle (speed booster)
    sf::ConvexShape triangle;
    triangle.setPointCount(3);
    triangle.setPoint(0, sf::Vector2f(0.f, 0.f));
    triangle.setPoint(1, sf::Vector2f(30.f, 0.f));
    triangle.setPoint(2, sf::Vector2f(15.f, 30.f));
    triangle.setFillColor(sf::Color::Yellow);
    triangle.setOutlineThickness(2);
    triangle.setOutlineColor(sf::Color::Black);
    triangle.setPosition(static_cast<float>(std::rand() % static_cast<int>(gameWidth - 30)), static_cast<float>(std::rand() % static_cast<int>(gameHeight - 30)));

    // Load the text font
    sf::Font font;
    if (!font.loadFromFile(resourcesDir() + "tuffy.ttf"))
        return EXIT_FAILURE;

    // Initialize the pause message
    sf::Text pauseMessage;
    pauseMessage.setFont(font);
    pauseMessage.setCharacterSize(40);
    pauseMessage.setPosition(170.f, 200.f);
    pauseMessage.setFillColor(sf::Color::White);

    // Initialize the score display
    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(30);
    scoreText.setPosition(gameWidth / 2.f - 50.f, 20.f);
    scoreText.setFillColor(sf::Color::White);

    int leftScore = 0;
    int rightScore = 0;

    #ifdef SFML_SYSTEM_IOS
    pauseMessage.setString("Welcome to SFML Tennis!\nTouch the screen to start the game.");
    #else
    pauseMessage.setString("Welcome to SFML Tennis!\n\nPress space to start the game.");
    #endif

    // Define the paddles properties
    sf::Clock AITimer;
    const sf::Time AITime   = sf::seconds(0.1f);
    const float paddleSpeed = 400.f;
    float rightPaddleSpeed  = 0.f;
    float ballSpeed         = 400.f;
    float ballAngle         = 0.f; // to be changed later
    bool isBoosted          = false;
    sf::Clock boostTimer;

    // Define the obstacle properties
    float obstacleSpeed = 200.f;
    bool movingUp = true;

    sf::Clock clock;
    bool isPlaying = false;
    bool gameEnded = false;

    // Create the center line
    sf::RectangleShape centerLine(sf::Vector2f(5.f, gameHeight));
    centerLine.setFillColor(sf::Color::White);
    centerLine.setPosition(gameWidth / 2.f - 2.5f, 0.f);

    while (window.isOpen())
    {
        // Handle events
        sf::Event event;
        while (window.pollEvent(event))
        {
            // Window closed or escape key pressed: exit
            if ((event.type == sf::Event::Closed) ||
               ((event.type == sf::Event::KeyPressed) && (event.key.code == sf::Keyboard::Escape)))
            {
                window.close();
                break;
            }

            // Space key pressed or touch began: play or restart
            if (((event.type == sf::Event::KeyPressed) && (event.key.code == sf::Keyboard::Space)) ||
                (event.type == sf::Event::TouchBegan))
            {
                if (!isPlaying && !gameEnded)
                {
                    // (re)start the game
                    isPlaying = true;
                    clock.restart();

                    // Reset the position of the paddles and ball
                    leftPaddle.setPosition(10.f + paddleSize.x / 2.f, gameHeight / 2.f);
                    rightPaddle.setPosition(gameWidth - 10.f - paddleSize.x / 2.f, gameHeight / 2.f);
                    ball.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    obstacle.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    triangle.setPosition(static_cast<float>(std::rand() % static_cast<int>(gameWidth - 30)), static_cast<float>(std::rand() % static_cast<int>(gameHeight - 30)));

                    // Reset the ball angle
                    do
                    {
                        // Make sure the ball initial angle is not too much vertical
                        ballAngle = static_cast<float>(std::rand() % 360) * 2.f * pi / 360.f;
                    }
                    while (std::abs(std::cos(ballAngle)) < 0.7f);
                }
                else if (gameEnded)
                {
                    // Reset the scores and restart the game
                    leftScore = 0;
                    rightScore = 0;
                    gameEnded = false;
                    pauseMessage.setString(
                        #ifdef SFML_SYSTEM_IOS
                        "Welcome to SFML Tennis!\nTouch the screen to start the game."
                        #else
                        "Welcome to SFML Tennis!\n\nPress space to start the game."
                        #endif
                    );
                }
            }

            // Window size changed, adjust view appropriately
            if (event.type == sf::Event::Resized)
            {
                sf::View view;
                view.setSize(gameWidth, gameHeight);
                view.setCenter(gameWidth / 2.f, gameHeight  /2.f);
                window.setView(view);
            }
        }

        if (isPlaying)
        {
            float deltaTime = clock.restart().asSeconds();

            // Move the player's paddle vertically
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) &&
               (leftPaddle.getPosition().y - paddleSize.y / 2 > 5.f))
            {
                leftPaddle.move(0.f, -paddleSpeed * deltaTime);
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) &&
               (leftPaddle.getPosition().y + paddleSize.y / 2 < gameHeight - 5.f))
            {
                leftPaddle.move(0.f, paddleSpeed * deltaTime);
            }

            // Move the player's paddle horizontally
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) &&
               (leftPaddle.getPosition().x - paddleSize.x / 2 > 5.f))
            {
                leftPaddle.move(-paddleSpeed * deltaTime, 0.f);
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) &&
               (leftPaddle.getPosition().x + paddleSize.x / 2 < gameWidth / 2 - 5.f)) // Limit to the center line
            {
                leftPaddle.move(paddleSpeed * deltaTime, 0.f);
            }

            // Touch input
            if (sf::Touch::isDown(0))
            {
                sf::Vector2i pos = sf::Touch::getPosition(0);
                sf::Vector2f mappedPos = window.mapPixelToCoords(pos);
                leftPaddle.setPosition(std::min(mappedPos.x, gameWidth / 2 - paddleSize.x / 2 - 5.f), mappedPos.y);
            }

            // Move the computer's paddle vertically
            if (((rightPaddleSpeed < 0.f) && (rightPaddle.getPosition().y - paddleSize.y / 2 > 5.f)) ||
                ((rightPaddleSpeed > 0.f) && (rightPaddle.getPosition().y + paddleSize.y / 2 < gameHeight - 5.f)))
            {
                rightPaddle.move(0.f, rightPaddleSpeed * deltaTime);
            }

            // Move the computer's paddle horizontally (follows the ball)
            if (ball.getPosition().x > gameWidth / 2.f)
            {
                if (ball.getPosition().x < rightPaddle.getPosition().x - paddleSize.x / 2 && (rightPaddle.getPosition().x - paddleSize.x / 2 > gameWidth / 2 + 5.f))
                {
                    rightPaddle.move(-paddleSpeed * deltaTime, 0.f);
                }
                if (ball.getPosition().x > rightPaddle.getPosition().x + paddleSize.x / 2 && (rightPaddle.getPosition().x + paddleSize.x / 2 < gameWidth - 5.f))
                {
                    rightPaddle.move(paddleSpeed * deltaTime, 0.f);
                }
            }

            // Update the computer's paddle direction according to the ball position
            if (AITimer.getElapsedTime() > AITime)
            {
                AITimer.restart();
                if (ball.getPosition().y + ballRadius > rightPaddle.getPosition().y + paddleSize.y / 2)
                    rightPaddleSpeed = paddleSpeed;
                else if (ball.getPosition().y - ballRadius < rightPaddle.getPosition().y - paddleSize.y / 2)
                    rightPaddleSpeed = -paddleSpeed;
                else
                    rightPaddleSpeed = 0.f;
            }

            // Move the ball
            float factor = ballSpeed * deltaTime;
            ball.move(std::cos(ballAngle) * factor, std::sin(ballAngle) * factor);

            // Move the obstacle
            if (movingUp)
            {
                obstacle.move(0.f, -obstacleSpeed * deltaTime);
                if (obstacle.getPosition().y - obstacleSize.y / 2 <= 0.f)
                {
                    movingUp = false;
                }
            }
            else
            {
                obstacle.move(0.f, obstacleSpeed * deltaTime);
                if (obstacle.getPosition().y + obstacleSize.y / 2 >= gameHeight)
                {
                    movingUp = true;
                }
            }

            // Check collisions between the ball and the screen
            if (ball.getPosition().x - ballRadius < 0.f)
            {
                rightScore++;
                if (rightScore >= 5)
                {
                    isPlaying = false;
                    gameEnded = true;
                    pauseMessage.setString("You Lost the game!");
                }
                else
                {
                    ball.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    ballAngle = static_cast<float>(std::rand() % 360) * 2.f * pi / 360.f;
                }
            }
            if (ball.getPosition().x + ballRadius > gameWidth)
            {
                leftScore++;
                if (leftScore >= 5)
                {
                    isPlaying = false;
                    gameEnded = true;
                    pauseMessage.setString("You Won the game!");
                }
                else
                {
                    ball.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    ballAngle = static_cast<float>(std::rand() % 360) * 2.f * pi / 360.f;
                }
            }
            if (ball.getPosition().y - ballRadius < 0.f)
            {
                ballSound.play();
                ballAngle = -ballAngle;
                ball.setPosition(ball.getPosition().x, ballRadius + 0.1f);
            }
            if (ball.getPosition().y + ballRadius > gameHeight)
            {
                ballSound.play();
                ballAngle = -ballAngle;
                ball.setPosition(ball.getPosition().x, gameHeight - ballRadius - 0.1f);
            }

            // Check the collisions between the ball and the paddles
            // Left Paddle
            if (ball.getPosition().x - ballRadius < leftPaddle.getPosition().x + paddleSize.x / 2 &&
                ball.getPosition().x - ballRadius > leftPaddle.getPosition().x &&
                ball.getPosition().y + ballRadius >= leftPaddle.getPosition().y - paddleSize.y / 2 &&
                ball.getPosition().y - ballRadius <= leftPaddle.getPosition().y + paddleSize.y / 2)
            {
                if (ball.getPosition().y > leftPaddle.getPosition().y)
                    ballAngle = pi - ballAngle + static_cast<float>(std::rand() % 20) * pi / 180;
                else
                    ballAngle = pi - ballAngle - static_cast<float>(std::rand() % 20) * pi / 180;

                ballSound.play();
                ball.setPosition(leftPaddle.getPosition().x + ballRadius + paddleSize.x / 2 + 0.1f, ball.getPosition().y);
            }

            // Right Paddle
            if (ball.getPosition().x + ballRadius > rightPaddle.getPosition().x - paddleSize.x / 2 &&
                ball.getPosition().x + ballRadius < rightPaddle.getPosition().x &&
                ball.getPosition().y + ballRadius >= rightPaddle.getPosition().y - paddleSize.y / 2 &&
                ball.getPosition().y - ballRadius <= rightPaddle.getPosition().y + paddleSize.y / 2)
            {
                if (ball.getPosition().y > rightPaddle.getPosition().y)
                    ballAngle = pi - ballAngle + static_cast<float>(std::rand() % 20) * pi / 180;
                else
                    ballAngle = pi - ballAngle - static_cast<float>(std::rand() % 20) * pi / 180;

                ballSound.play();
                ball.setPosition(rightPaddle.getPosition().x - ballRadius - paddleSize.x / 2 - 0.1f, ball.getPosition().y);
            }

            // Check the collisions between the ball and the obstacle
            if (ball.getPosition().x - ballRadius < obstacle.getPosition().x + obstacleSize.x / 2 &&
                ball.getPosition().x + ballRadius > obstacle.getPosition().x - obstacleSize.x / 2 &&
                ball.getPosition().y + ballRadius >= obstacle.getPosition().y - obstacleSize.y / 2 &&
                ball.getPosition().y - ballRadius <= obstacle.getPosition().y + obstacleSize.y / 2)
            {
                ballAngle = pi - ballAngle;
                ballSound.play();
                if (ball.getPosition().x < obstacle.getPosition().x)
                {
                    ball.setPosition(obstacle.getPosition().x - obstacleSize.x / 2 - ballRadius - 0.1f, ball.getPosition().y);
                }
                else
                {
                    ball.setPosition(obstacle.getPosition().x + obstacleSize.x / 2 + ballRadius + 0.1f, ball.getPosition().y);
                }
            }

            // Check the collisions between the ball and the triangle (speed booster)
            if (triangle.getGlobalBounds().intersects(ball.getGlobalBounds()))
            {
                isBoosted = true;
                boostTimer.restart();
                ballSpeed *= 2;
                triangle.setPosition(-100, -100); // Hide the triangle offscreen
            }

            // Reset ball speed and relocate triangle after 5 seconds
            if (isBoosted && boostTimer.getElapsedTime() > sf::seconds(5))
            {
                ballSpeed /= 2;
                isBoosted = false;
                triangle.setPosition(static_cast<float>(std::rand() % static_cast<int>(gameWidth - 30)), static_cast<float>(std::rand() % static_cast<int>(gameHeight - 30)));
            }
        }

        // Clear the window
        window.clear(sf::Color(50, 50, 50));

        if (isPlaying)
        {
            // Draw the paddles, the ball, the obstacle, and the center line
            window.draw(leftPaddle);
            window.draw(rightPaddle);
            window.draw(ball);
            window.draw(obstacle);
            window.draw(triangle); // Draw the triangle
            window.draw(centerLine); // Draw the center line

            // Update and draw the score
            scoreText.setString(std::to_string(leftScore) + " - " + std::to_string(rightScore));
            window.draw(scoreText);
        }
        else
        {
            // Draw the pause message
            window.draw(pauseMessage);
            window.draw(sfmlLogo);
        }

        // Display things on screen
        window.display();
    }

    return EXIT_SUCCESS;
}
#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <cmath>
#include <ctime>
#include <cstdlib>

#ifdef SFML_SYSTEM_IOS
#include <SFML/Main.hpp>
#endif

std::string resourcesDir()
{
#ifdef SFML_SYSTEM_IOS
    return "";
#else
    return "resources/";
#endif
}

int main()
{
    std::srand(static_cast<unsigned int>(std::time(NULL)));

    // Define some constants
    const float pi = 3.14159f;
    const float gameWidth = 800;
    const float gameHeight = 600;
    sf::Vector2f paddleSize(25, 100);
    sf::Vector2f obstacleSize(10, 100); // Size of the obstacle
    float ballRadius = 10.f;

    // Create the window of the application
    sf::RenderWindow window(sf::VideoMode(static_cast<unsigned int>(gameWidth), static_cast<unsigned int>(gameHeight), 32), "SFML Tennis",
                            sf::Style::Titlebar | sf::Style::Close);
    window.setVerticalSyncEnabled(true);

    // Load the sounds used in the game
    sf::SoundBuffer ballSoundBuffer;
    if (!ballSoundBuffer.loadFromFile(resourcesDir() + "ball.wav"))
        return EXIT_FAILURE;
    sf::Sound ballSound(ballSoundBuffer);

    // Create the SFML logo texture:
    sf::Texture sfmlLogoTexture;
    if(!sfmlLogoTexture.loadFromFile(resourcesDir() + "sfml_logo.png"))
        return EXIT_FAILURE;
    sf::Sprite sfmlLogo;
    sfmlLogo.setTexture(sfmlLogoTexture);
    sfmlLogo.setPosition(170, 50);

    // Create the left paddle
    sf::RectangleShape leftPaddle;
    leftPaddle.setSize(paddleSize - sf::Vector2f(3, 3));
    leftPaddle.setOutlineThickness(3);
    leftPaddle.setOutlineColor(sf::Color::Black);
    leftPaddle.setFillColor(sf::Color(100, 100, 200));
    leftPaddle.setOrigin(paddleSize / 2.f);

    // Create the right paddle
    sf::RectangleShape rightPaddle;
    rightPaddle.setSize(paddleSize - sf::Vector2f(3, 3));
    rightPaddle.setOutlineThickness(3);
    rightPaddle.setOutlineColor(sf::Color::Black);
    rightPaddle.setFillColor(sf::Color(200, 100, 100));
    rightPaddle.setOrigin(paddleSize / 2.f);

    // Create the ball
    sf::CircleShape ball;
    ball.setRadius(ballRadius - 3);
    ball.setOutlineThickness(2);
    ball.setOutlineColor(sf::Color::Black);
    ball.setFillColor(sf::Color::White);
    ball.setOrigin(ballRadius / 2, ballRadius / 2);

    // Create the obstacle
    sf::RectangleShape obstacle;
    obstacle.setSize(obstacleSize);
    obstacle.setOutlineThickness(3);
    obstacle.setOutlineColor(sf::Color::Black);
    obstacle.setFillColor(sf::Color::Green);
    obstacle.setOrigin(obstacleSize / 2.f);
    obstacle.setPosition(gameWidth / 2.f, gameHeight / 2.f);

    // Create the triangle (speed booster)
    sf::ConvexShape triangle;
    triangle.setPointCount(3);
    triangle.setPoint(0, sf::Vector2f(0.f, 0.f));
    triangle.setPoint(1, sf::Vector2f(30.f, 0.f));
    triangle.setPoint(2, sf::Vector2f(15.f, 30.f));
    triangle.setFillColor(sf::Color::Yellow);
    triangle.setOutlineThickness(2);
    triangle.setOutlineColor(sf::Color::Black);
    triangle.setPosition(static_cast<float>(std::rand() % static_cast<int>(gameWidth - 30)), static_cast<float>(std::rand() % static_cast<int>(gameHeight - 30)));

    // Load the text font
    sf::Font font;
    if (!font.loadFromFile(resourcesDir() + "tuffy.ttf"))
        return EXIT_FAILURE;

    // Initialize the pause message
    sf::Text pauseMessage;
    pauseMessage.setFont(font);
    pauseMessage.setCharacterSize(40);
    pauseMessage.setPosition(170.f, 200.f);
    pauseMessage.setFillColor(sf::Color::White);

    // Initialize the score display
    sf::Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(30);
    scoreText.setPosition(gameWidth / 2.f - 50.f, 20.f);
    scoreText.setFillColor(sf::Color::White);

    int leftScore = 0;
    int rightScore = 0;

    #ifdef SFML_SYSTEM_IOS
    pauseMessage.setString("Welcome to SFML Tennis!\nTouch the screen to start the game.");
    #else
    pauseMessage.setString("Welcome to SFML Tennis!\n\nPress space to start the game.");
    #endif

    // Define the paddles properties
    sf::Clock AITimer;
    const sf::Time AITime   = sf::seconds(0.1f);
    const float paddleSpeed = 400.f;
    float rightPaddleSpeed  = 0.f;
    float ballSpeed         = 400.f;
    float ballAngle         = 0.f; // to be changed later
    bool isBoosted          = false;
    sf::Clock boostTimer;

    // Define the obstacle properties
    float obstacleSpeed = 200.f;
    bool movingUp = true;

    sf::Clock clock;
    bool isPlaying = false;
    bool gameEnded = false;

    // Create the center line
    sf::RectangleShape centerLine(sf::Vector2f(5.f, gameHeight));
    centerLine.setFillColor(sf::Color::White);
    centerLine.setPosition(gameWidth / 2.f - 2.5f, 0.f);

    while (window.isOpen())
    {
        // Handle events
        sf::Event event;
        while (window.pollEvent(event))
        {
            // Window closed or escape key pressed: exit
            if ((event.type == sf::Event::Closed) ||
               ((event.type == sf::Event::KeyPressed) && (event.key.code == sf::Keyboard::Escape)))
            {
                window.close();
                break;
            }

            // Space key pressed or touch began: play or restart
            if (((event.type == sf::Event::KeyPressed) && (event.key.code == sf::Keyboard::Space)) ||
                (event.type == sf::Event::TouchBegan))
            {
                if (!isPlaying && !gameEnded)
                {
                    // (re)start the game
                    isPlaying = true;
                    clock.restart();

                    // Reset the position of the paddles and ball
                    leftPaddle.setPosition(10.f + paddleSize.x / 2.f, gameHeight / 2.f);
                    rightPaddle.setPosition(gameWidth - 10.f - paddleSize.x / 2.f, gameHeight / 2.f);
                    ball.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    obstacle.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    triangle.setPosition(static_cast<float>(std::rand() % static_cast<int>(gameWidth - 30)), static_cast<float>(std::rand() % static_cast<int>(gameHeight - 30)));

                    // Reset the ball angle
                    do
                    {
                        // Make sure the ball initial angle is not too much vertical
                        ballAngle = static_cast<float>(std::rand() % 360) * 2.f * pi / 360.f;
                    }
                    while (std::abs(std::cos(ballAngle)) < 0.7f);
                }
                else if (gameEnded)
                {
                    // Reset the scores and restart the game
                    leftScore = 0;
                    rightScore = 0;
                    gameEnded = false;
                    pauseMessage.setString(
                        #ifdef SFML_SYSTEM_IOS
                        "Welcome to SFML Tennis!\nTouch the screen to start the game."
                        #else
                        "Welcome to SFML Tennis!\n\nPress space to start the game."
                        #endif
                    );
                }
            }

            // Window size changed, adjust view appropriately
            if (event.type == sf::Event::Resized)
            {
                sf::View view;
                view.setSize(gameWidth, gameHeight);
                view.setCenter(gameWidth / 2.f, gameHeight  /2.f);
                window.setView(view);
            }
        }

        if (isPlaying)
        {
            float deltaTime = clock.restart().asSeconds();

            // Move the player's paddle vertically
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) &&
               (leftPaddle.getPosition().y - paddleSize.y / 2 > 5.f))
            {
                leftPaddle.move(0.f, -paddleSpeed * deltaTime);
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) &&
               (leftPaddle.getPosition().y + paddleSize.y / 2 < gameHeight - 5.f))
            {
                leftPaddle.move(0.f, paddleSpeed * deltaTime);
            }

            // Move the player's paddle horizontally
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) &&
               (leftPaddle.getPosition().x - paddleSize.x / 2 > 5.f))
            {
                leftPaddle.move(-paddleSpeed * deltaTime, 0.f);
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) &&
               (leftPaddle.getPosition().x + paddleSize.x / 2 < gameWidth / 2 - 5.f)) // Limit to the center line
            {
                leftPaddle.move(paddleSpeed * deltaTime, 0.f);
            }

            // Touch input
            if (sf::Touch::isDown(0))
            {
                sf::Vector2i pos = sf::Touch::getPosition(0);
                sf::Vector2f mappedPos = window.mapPixelToCoords(pos);
                leftPaddle.setPosition(std::min(mappedPos.x, gameWidth / 2 - paddleSize.x / 2 - 5.f), mappedPos.y);
            }

            // Move the computer's paddle vertically
            if (((rightPaddleSpeed < 0.f) && (rightPaddle.getPosition().y - paddleSize.y / 2 > 5.f)) ||
                ((rightPaddleSpeed > 0.f) && (rightPaddle.getPosition().y + paddleSize.y / 2 < gameHeight - 5.f)))
            {
                rightPaddle.move(0.f, rightPaddleSpeed * deltaTime);
            }

            // Move the computer's paddle horizontally (follows the ball)
            if (ball.getPosition().x > gameWidth / 2.f)
            {
                if (ball.getPosition().x < rightPaddle.getPosition().x - paddleSize.x / 2 && (rightPaddle.getPosition().x - paddleSize.x / 2 > gameWidth / 2 + 5.f))
                {
                    rightPaddle.move(-paddleSpeed * deltaTime, 0.f);
                }
                if (ball.getPosition().x > rightPaddle.getPosition().x + paddleSize.x / 2 && (rightPaddle.getPosition().x + paddleSize.x / 2 < gameWidth - 5.f))
                {
                    rightPaddle.move(paddleSpeed * deltaTime, 0.f);
                }
            }

            // Update the computer's paddle direction according to the ball position
            if (AITimer.getElapsedTime() > AITime)
            {
                AITimer.restart();
                if (ball.getPosition().y + ballRadius > rightPaddle.getPosition().y + paddleSize.y / 2)
                    rightPaddleSpeed = paddleSpeed;
                else if (ball.getPosition().y - ballRadius < rightPaddle.getPosition().y - paddleSize.y / 2)
                    rightPaddleSpeed = -paddleSpeed;
                else
                    rightPaddleSpeed = 0.f;
            }

            // Move the ball
            float factor = ballSpeed * deltaTime;
            ball.move(std::cos(ballAngle) * factor, std::sin(ballAngle) * factor);

            // Move the obstacle
            if (movingUp)
            {
                obstacle.move(0.f, -obstacleSpeed * deltaTime);
                if (obstacle.getPosition().y - obstacleSize.y / 2 <= 0.f)
                {
                    movingUp = false;
                }
            }
            else
            {
                obstacle.move(0.f, obstacleSpeed * deltaTime);
                if (obstacle.getPosition().y + obstacleSize.y / 2 >= gameHeight)
                {
                    movingUp = true;
                }
            }

            // Check collisions between the ball and the screen
            if (ball.getPosition().x - ballRadius < 0.f)
            {
                rightScore++;
                if (rightScore >= 5)
                {
                    isPlaying = false;
                    gameEnded = true;
                    pauseMessage.setString("You Lost the game!");
                }
                else
                {
                    ball.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    ballAngle = static_cast<float>(std::rand() % 360) * 2.f * pi / 360.f;
                }
            }
            if (ball.getPosition().x + ballRadius > gameWidth)
            {
                leftScore++;
                if (leftScore >= 5)
                {
                    isPlaying = false;
                    gameEnded = true;
                    pauseMessage.setString("You Won the game!");
                }
                else
                {
                    ball.setPosition(gameWidth / 2.f, gameHeight / 2.f);
                    ballAngle = static_cast<float>(std::rand() % 360) * 2.f * pi / 360.f;
                }
            }
            if (ball.getPosition().y - ballRadius < 0.f)
            {
                ballSound.play();
                ballAngle = -ballAngle;
                ball.setPosition(ball.getPosition().x, ballRadius + 0.1f);
            }
            if (ball.getPosition().y + ballRadius > gameHeight)
            {
                ballSound.play();
                ballAngle = -ballAngle;
                ball.setPosition(ball.getPosition().x, gameHeight - ballRadius - 0.1f);
            }

            // Check the collisions between the ball and the paddles
            // Left Paddle
            if (ball.getPosition().x - ballRadius < leftPaddle.getPosition().x + paddleSize.x / 2 &&
                ball.getPosition().x - ballRadius > leftPaddle.getPosition().x &&
                ball.getPosition().y + ballRadius >= leftPaddle.getPosition().y - paddleSize.y / 2 &&
                ball.getPosition().y - ballRadius <= leftPaddle.getPosition().y + paddleSize.y / 2)
            {
                if (ball.getPosition().y > leftPaddle.getPosition().y)
                    ballAngle = pi - ballAngle + static_cast<float>(std::rand() % 20) * pi / 180;
                else
                    ballAngle = pi - ballAngle - static_cast<float>(std::rand() % 20) * pi / 180;

                ballSound.play();
                ball.setPosition(leftPaddle.getPosition().x + ballRadius + paddleSize.x / 2 + 0.1f, ball.getPosition().y);
            }

            // Right Paddle
            if (ball.getPosition().x + ballRadius > rightPaddle.getPosition().x - paddleSize.x / 2 &&
                ball.getPosition().x + ballRadius < rightPaddle.getPosition().x &&
                ball.getPosition().y + ballRadius >= rightPaddle.getPosition().y - paddleSize.y / 2 &&
                ball.getPosition().y - ballRadius <= rightPaddle.getPosition().y + paddleSize.y / 2)
            {
                if (ball.getPosition().y > rightPaddle.getPosition().y)
                    ballAngle = pi - ballAngle + static_cast<float>(std::rand() % 20) * pi / 180;
                else
                    ballAngle = pi - ballAngle - static_cast<float>(std::rand() % 20) * pi / 180;

                ballSound.play();
                ball.setPosition(rightPaddle.getPosition().x - ballRadius - paddleSize.x / 2 - 0.1f, ball.getPosition().y);
            }

            // Check the collisions between the ball and the obstacle
            if (ball.getPosition().x - ballRadius < obstacle.getPosition().x + obstacleSize.x / 2 &&
                ball.getPosition().x + ballRadius > obstacle.getPosition().x - obstacleSize.x / 2 &&
                ball.getPosition().y + ballRadius >= obstacle.getPosition().y - obstacleSize.y / 2 &&
                ball.getPosition().y - ballRadius <= obstacle.getPosition().y + obstacleSize.y / 2)
            {
                ballAngle = pi - ballAngle;
                ballSound.play();
                if (ball.getPosition().x < obstacle.getPosition().x)
                {
                    ball.setPosition(obstacle.getPosition().x - obstacleSize.x / 2 - ballRadius - 0.1f, ball.getPosition().y);
                }
                else
                {
                    ball.setPosition(obstacle.getPosition().x + obstacleSize.x / 2 + ballRadius + 0.1f, ball.getPosition().y);
                }
            }

            // Check the collisions between the ball and the triangle (speed booster)
            if (triangle.getGlobalBounds().intersects(ball.getGlobalBounds()))
            {
                isBoosted = true;
                boostTimer.restart();
                ballSpeed *= 2;
                triangle.setPosition(-100, -100); // Hide the triangle offscreen
            }

            // Reset ball speed and relocate triangle after 5 seconds
            if (isBoosted && boostTimer.getElapsedTime() > sf::seconds(5))
            {
                ballSpeed /= 2;
                isBoosted = false;
                triangle.setPosition(static_cast<float>(std::rand() % static_cast<int>(gameWidth - 30)), static_cast<float>(std::rand() % static_cast<int>(gameHeight - 30)));
            }
        }

        // Clear the window
        window.clear(sf::Color(50, 50, 50));

        if (isPlaying)
        {
            // Draw the paddles, the ball, the obstacle, and the center line
            window.draw(leftPaddle);
            window.draw(rightPaddle);
            window.draw(ball);
            window.draw(obstacle);
            window.draw(triangle); // Draw the triangle
            window.draw(centerLine); // Draw the center line

            // Update and draw the score
            scoreText.setString(std::to_string(leftScore) + " - " + std::to_string(rightScore));
            window.draw(scoreText);
        }
        else
        {
            // Draw the pause message
            window.draw(pauseMessage);
            window.draw(sfmlLogo);
        }

        // Display things on screen
        window.display();
    }

    return EXIT_SUCCESS;
}
